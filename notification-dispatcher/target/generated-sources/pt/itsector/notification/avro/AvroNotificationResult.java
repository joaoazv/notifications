/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pt.itsector.notification.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroNotificationResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5109382777772936871L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroNotificationResult\",\"namespace\":\"pt.itsector.notification.avro\",\"fields\":[{\"name\":\"notificationId\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"statusMessage\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sendingDateTime\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroNotificationResult> ENCODER =
      new BinaryMessageEncoder<AvroNotificationResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroNotificationResult> DECODER =
      new BinaryMessageDecoder<AvroNotificationResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroNotificationResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroNotificationResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroNotificationResult>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroNotificationResult to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroNotificationResult from a ByteBuffer. */
  public static AvroNotificationResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence notificationId;
  @Deprecated public int status;
  @Deprecated public java.lang.CharSequence statusMessage;
  @Deprecated public java.lang.CharSequence sendingDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroNotificationResult() {}

  /**
   * All-args constructor.
   * @param notificationId The new value for notificationId
   * @param status The new value for status
   * @param statusMessage The new value for statusMessage
   * @param sendingDateTime The new value for sendingDateTime
   */
  public AvroNotificationResult(java.lang.CharSequence notificationId, java.lang.Integer status, java.lang.CharSequence statusMessage, java.lang.CharSequence sendingDateTime) {
    this.notificationId = notificationId;
    this.status = status;
    this.statusMessage = statusMessage;
    this.sendingDateTime = sendingDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return notificationId;
    case 1: return status;
    case 2: return statusMessage;
    case 3: return sendingDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: notificationId = (java.lang.CharSequence)value$; break;
    case 1: status = (java.lang.Integer)value$; break;
    case 2: statusMessage = (java.lang.CharSequence)value$; break;
    case 3: sendingDateTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'notificationId' field.
   * @return The value of the 'notificationId' field.
   */
  public java.lang.CharSequence getNotificationId() {
    return notificationId;
  }

  /**
   * Sets the value of the 'notificationId' field.
   * @param value the value to set.
   */
  public void setNotificationId(java.lang.CharSequence value) {
    this.notificationId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'statusMessage' field.
   * @return The value of the 'statusMessage' field.
   */
  public java.lang.CharSequence getStatusMessage() {
    return statusMessage;
  }

  /**
   * Sets the value of the 'statusMessage' field.
   * @param value the value to set.
   */
  public void setStatusMessage(java.lang.CharSequence value) {
    this.statusMessage = value;
  }

  /**
   * Gets the value of the 'sendingDateTime' field.
   * @return The value of the 'sendingDateTime' field.
   */
  public java.lang.CharSequence getSendingDateTime() {
    return sendingDateTime;
  }

  /**
   * Sets the value of the 'sendingDateTime' field.
   * @param value the value to set.
   */
  public void setSendingDateTime(java.lang.CharSequence value) {
    this.sendingDateTime = value;
  }

  /**
   * Creates a new AvroNotificationResult RecordBuilder.
   * @return A new AvroNotificationResult RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotificationResult.Builder newBuilder() {
    return new pt.itsector.notification.avro.AvroNotificationResult.Builder();
  }

  /**
   * Creates a new AvroNotificationResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroNotificationResult RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotificationResult.Builder newBuilder(pt.itsector.notification.avro.AvroNotificationResult.Builder other) {
    return new pt.itsector.notification.avro.AvroNotificationResult.Builder(other);
  }

  /**
   * Creates a new AvroNotificationResult RecordBuilder by copying an existing AvroNotificationResult instance.
   * @param other The existing instance to copy.
   * @return A new AvroNotificationResult RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotificationResult.Builder newBuilder(pt.itsector.notification.avro.AvroNotificationResult other) {
    return new pt.itsector.notification.avro.AvroNotificationResult.Builder(other);
  }

  /**
   * RecordBuilder for AvroNotificationResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroNotificationResult>
    implements org.apache.avro.data.RecordBuilder<AvroNotificationResult> {

    private java.lang.CharSequence notificationId;
    private int status;
    private java.lang.CharSequence statusMessage;
    private java.lang.CharSequence sendingDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pt.itsector.notification.avro.AvroNotificationResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.notificationId)) {
        this.notificationId = data().deepCopy(fields()[0].schema(), other.notificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[2].schema(), other.statusMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sendingDateTime)) {
        this.sendingDateTime = data().deepCopy(fields()[3].schema(), other.sendingDateTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroNotificationResult instance
     * @param other The existing instance to copy.
     */
    private Builder(pt.itsector.notification.avro.AvroNotificationResult other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.notificationId)) {
        this.notificationId = data().deepCopy(fields()[0].schema(), other.notificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[2].schema(), other.statusMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sendingDateTime)) {
        this.sendingDateTime = data().deepCopy(fields()[3].schema(), other.sendingDateTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'notificationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotificationId() {
      return notificationId;
    }

    /**
      * Sets the value of the 'notificationId' field.
      * @param value The value of 'notificationId'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder setNotificationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.notificationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationId' field has been set.
      * @return True if the 'notificationId' field has been set, false otherwise.
      */
    public boolean hasNotificationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'notificationId' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder clearNotificationId() {
      notificationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.Integer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder setStatus(int value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder clearStatus() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'statusMessage' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatusMessage() {
      return statusMessage;
    }

    /**
      * Sets the value of the 'statusMessage' field.
      * @param value The value of 'statusMessage'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder setStatusMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.statusMessage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'statusMessage' field has been set.
      * @return True if the 'statusMessage' field has been set, false otherwise.
      */
    public boolean hasStatusMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'statusMessage' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder clearStatusMessage() {
      statusMessage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendingDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getSendingDateTime() {
      return sendingDateTime;
    }

    /**
      * Sets the value of the 'sendingDateTime' field.
      * @param value The value of 'sendingDateTime'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder setSendingDateTime(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sendingDateTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sendingDateTime' field has been set.
      * @return True if the 'sendingDateTime' field has been set, false otherwise.
      */
    public boolean hasSendingDateTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sendingDateTime' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotificationResult.Builder clearSendingDateTime() {
      sendingDateTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroNotificationResult build() {
      try {
        AvroNotificationResult record = new AvroNotificationResult();
        record.notificationId = fieldSetFlags()[0] ? this.notificationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.Integer) defaultValue(fields()[1]);
        record.statusMessage = fieldSetFlags()[2] ? this.statusMessage : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sendingDateTime = fieldSetFlags()[3] ? this.sendingDateTime : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroNotificationResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroNotificationResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroNotificationResult>
    READER$ = (org.apache.avro.io.DatumReader<AvroNotificationResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
