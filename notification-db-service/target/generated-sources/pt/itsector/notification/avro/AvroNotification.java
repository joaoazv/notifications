/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pt.itsector.notification.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroNotification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1970389752225147081L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroNotification\",\"namespace\":\"pt.itsector.notification.avro\",\"fields\":[{\"name\":\"notificationId\",\"type\":\"string\"},{\"name\":\"destination\",\"type\":\"string\"},{\"name\":\"subject\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"creationDateTime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sendingDateTime\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroNotification> ENCODER =
      new BinaryMessageEncoder<AvroNotification>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroNotification> DECODER =
      new BinaryMessageDecoder<AvroNotification>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroNotification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroNotification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroNotification>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroNotification to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroNotification from a ByteBuffer. */
  public static AvroNotification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence notificationId;
  @Deprecated public java.lang.CharSequence destination;
  @Deprecated public java.lang.CharSequence subject;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.lang.CharSequence creationDateTime;
  @Deprecated public java.lang.CharSequence sendingDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroNotification() {}

  /**
   * All-args constructor.
   * @param notificationId The new value for notificationId
   * @param destination The new value for destination
   * @param subject The new value for subject
   * @param message The new value for message
   * @param creationDateTime The new value for creationDateTime
   * @param sendingDateTime The new value for sendingDateTime
   */
  public AvroNotification(java.lang.CharSequence notificationId, java.lang.CharSequence destination, java.lang.CharSequence subject, java.lang.CharSequence message, java.lang.CharSequence creationDateTime, java.lang.CharSequence sendingDateTime) {
    this.notificationId = notificationId;
    this.destination = destination;
    this.subject = subject;
    this.message = message;
    this.creationDateTime = creationDateTime;
    this.sendingDateTime = sendingDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return notificationId;
    case 1: return destination;
    case 2: return subject;
    case 3: return message;
    case 4: return creationDateTime;
    case 5: return sendingDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: notificationId = (java.lang.CharSequence)value$; break;
    case 1: destination = (java.lang.CharSequence)value$; break;
    case 2: subject = (java.lang.CharSequence)value$; break;
    case 3: message = (java.lang.CharSequence)value$; break;
    case 4: creationDateTime = (java.lang.CharSequence)value$; break;
    case 5: sendingDateTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'notificationId' field.
   * @return The value of the 'notificationId' field.
   */
  public java.lang.CharSequence getNotificationId() {
    return notificationId;
  }

  /**
   * Sets the value of the 'notificationId' field.
   * @param value the value to set.
   */
  public void setNotificationId(java.lang.CharSequence value) {
    this.notificationId = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.lang.CharSequence getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.lang.CharSequence value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.CharSequence getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.CharSequence value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'creationDateTime' field.
   * @return The value of the 'creationDateTime' field.
   */
  public java.lang.CharSequence getCreationDateTime() {
    return creationDateTime;
  }

  /**
   * Sets the value of the 'creationDateTime' field.
   * @param value the value to set.
   */
  public void setCreationDateTime(java.lang.CharSequence value) {
    this.creationDateTime = value;
  }

  /**
   * Gets the value of the 'sendingDateTime' field.
   * @return The value of the 'sendingDateTime' field.
   */
  public java.lang.CharSequence getSendingDateTime() {
    return sendingDateTime;
  }

  /**
   * Sets the value of the 'sendingDateTime' field.
   * @param value the value to set.
   */
  public void setSendingDateTime(java.lang.CharSequence value) {
    this.sendingDateTime = value;
  }

  /**
   * Creates a new AvroNotification RecordBuilder.
   * @return A new AvroNotification RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotification.Builder newBuilder() {
    return new pt.itsector.notification.avro.AvroNotification.Builder();
  }

  /**
   * Creates a new AvroNotification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroNotification RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotification.Builder newBuilder(pt.itsector.notification.avro.AvroNotification.Builder other) {
    return new pt.itsector.notification.avro.AvroNotification.Builder(other);
  }

  /**
   * Creates a new AvroNotification RecordBuilder by copying an existing AvroNotification instance.
   * @param other The existing instance to copy.
   * @return A new AvroNotification RecordBuilder
   */
  public static pt.itsector.notification.avro.AvroNotification.Builder newBuilder(pt.itsector.notification.avro.AvroNotification other) {
    return new pt.itsector.notification.avro.AvroNotification.Builder(other);
  }

  /**
   * RecordBuilder for AvroNotification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroNotification>
    implements org.apache.avro.data.RecordBuilder<AvroNotification> {

    private java.lang.CharSequence notificationId;
    private java.lang.CharSequence destination;
    private java.lang.CharSequence subject;
    private java.lang.CharSequence message;
    private java.lang.CharSequence creationDateTime;
    private java.lang.CharSequence sendingDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pt.itsector.notification.avro.AvroNotification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.notificationId)) {
        this.notificationId = data().deepCopy(fields()[0].schema(), other.notificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creationDateTime)) {
        this.creationDateTime = data().deepCopy(fields()[4].schema(), other.creationDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sendingDateTime)) {
        this.sendingDateTime = data().deepCopy(fields()[5].schema(), other.sendingDateTime);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroNotification instance
     * @param other The existing instance to copy.
     */
    private Builder(pt.itsector.notification.avro.AvroNotification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.notificationId)) {
        this.notificationId = data().deepCopy(fields()[0].schema(), other.notificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destination)) {
        this.destination = data().deepCopy(fields()[1].schema(), other.destination);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creationDateTime)) {
        this.creationDateTime = data().deepCopy(fields()[4].schema(), other.creationDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sendingDateTime)) {
        this.sendingDateTime = data().deepCopy(fields()[5].schema(), other.sendingDateTime);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'notificationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotificationId() {
      return notificationId;
    }

    /**
      * Sets the value of the 'notificationId' field.
      * @param value The value of 'notificationId'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setNotificationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.notificationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationId' field has been set.
      * @return True if the 'notificationId' field has been set, false otherwise.
      */
    public boolean hasNotificationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'notificationId' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearNotificationId() {
      notificationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.lang.CharSequence getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setDestination(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.destination = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubject() {
      return subject;
    }

    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setSubject(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.subject = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreationDateTime() {
      return creationDateTime;
    }

    /**
      * Sets the value of the 'creationDateTime' field.
      * @param value The value of 'creationDateTime'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setCreationDateTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.creationDateTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'creationDateTime' field has been set.
      * @return True if the 'creationDateTime' field has been set, false otherwise.
      */
    public boolean hasCreationDateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'creationDateTime' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearCreationDateTime() {
      creationDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendingDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getSendingDateTime() {
      return sendingDateTime;
    }

    /**
      * Sets the value of the 'sendingDateTime' field.
      * @param value The value of 'sendingDateTime'.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder setSendingDateTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.sendingDateTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sendingDateTime' field has been set.
      * @return True if the 'sendingDateTime' field has been set, false otherwise.
      */
    public boolean hasSendingDateTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sendingDateTime' field.
      * @return This builder.
      */
    public pt.itsector.notification.avro.AvroNotification.Builder clearSendingDateTime() {
      sendingDateTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroNotification build() {
      try {
        AvroNotification record = new AvroNotification();
        record.notificationId = fieldSetFlags()[0] ? this.notificationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.destination = fieldSetFlags()[1] ? this.destination : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.subject = fieldSetFlags()[2] ? this.subject : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.creationDateTime = fieldSetFlags()[4] ? this.creationDateTime : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.sendingDateTime = fieldSetFlags()[5] ? this.sendingDateTime : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroNotification>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroNotification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroNotification>
    READER$ = (org.apache.avro.io.DatumReader<AvroNotification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
